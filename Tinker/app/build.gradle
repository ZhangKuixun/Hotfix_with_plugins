apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_8
def bakPath = file("${buildDir}/bakApk")//buildDir->app/build/

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.kevin.tinker"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    dexOptions {
        jumboMode = true

        javaMaxHeapSize "2g"

        additionalParameters = [//dex参数详见 dx --help
                                '--multi-dex',//多分包
                                '--set-max-idx-number=60000',//每个包内方法数上限
                                '--main-dex-list=' + projectDir + '/multiDexKeep.txt',//打包进主classes.dex的文件列表
                                '--minimal-main-dex'//使上一句生效
        ]

    }

    //配置签名，这里使用demo中的签名文件，真实项目中替换成自己的
    signingConfigs {
        release {
            try {
                storeFile file("C:/Users/ZhangKuixun/releaseKey/AndFix.jks")
                storePassword "123456"
                keyAlias "kevin"
                keyPassword "123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
        debug {
            try {
                storeFile file("C:/Users/ZhangKuixun/releaseKey/AndFix.jks")
                storePassword "123456"
                keyAlias "kevin"
                keyPassword "123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    //release包开始混淆
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), project.file('proguard-rules.pro')
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    /*配置渠道*/
    flavorDimensions "version"
    productFlavors {
        yingyongbao {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
        }
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //Tinker的核心库
    api("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }

    //生成application时使用
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") {
        changing = true
    }
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }

    implementation 'com.android.support:multidex:1.0.3'

    implementation  'com.umeng.umsdk:analytics:latest.integration'
    implementation  'com.umeng.umsdk:common:latest.integration'

}

//变量语句块
ext {
    tinkerEnabled = true
    tinkerOldApkPath = "${bakPath}/app-0919-18-13-49"
    tinkerId = "1.0"
    tinkerApplyMappingPath = "${bakPath}/app-0919-18-13-49"
    tinkerApplyResourcePath = "${bakPath}/app-0919-18-13-49"
    tinkerBuildFlavorDirectory = "${bakPath}/app-0919-18-13-49"
}

//获取是否使用tinker编译
def buildWithTinker() {
    return ext.tinkerEnabled
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return ext.tinkerId
}

def getTinkerBuildFlavorDirectory(){
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    //启用Tinker

    // 当作引入了一个包，和最顶上的{apply plugin: 'com.android.application'}一样，只有引入包名才能使用
    // android{...}语句块。引入{tinker.patch}，就可以使用tinker内部定义的语句块。
    apply plugin: 'com.tencent.tinker.patch'

    //所有tinker相关的参数配置
    tinkerPatch {

        oldApk = getOldApkPath()//指定oldApk文件路径

        ignoreWarning = false//不忽略tinker的警告，有则终止patch文件的生成
        //1. minSdkVersion小于14，但是dexMode的值为"raw";
        //2. 新编译的安装包出现新增的四大组件(Activity, BroadcastReceiver...)；
        //3. 定义在dex.loader用于加载补丁的类不在main dex中;
        //4. 定义在dex.loader用于加载补丁的类出现修改；
        //5. resources.arsc改变，但没有使用applyResourceMapping编译。

        useSign = true //强制patch文件也使用签名

        tinkerEnable = buildWithTinker() //指定是否启用tinker

        buildConfig {//android在打包的时候有buildConfig，tinker也模拟这个buildConfig

            applyMapping = getApplyMappingPath() // 指定old apk打包时所使用的混淆文件

            applyResourceMapping = getApplyResourceMappingPath() // 指定old apk的资源文件

            tinkerId = getTinkerIdValue() //指定TinkerId。必须和old apk的TinkerId一致

            keepDexApply = false //实际开发中置为false
        }

        //Tinker可以修改dex。
        dex {

            dexMode = "jar" // jar、raw。jar->适配到api14以下，raw-适配到api14以上。jar->tinker在处理
            // dex时，会将dex重新压缩成jar文件。raw->表明tinker直接是对dex做一个处理，使用jar文件在生成patch
            // 文件的时候patch文件体积较小，实际开发中使用jar模式。

            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"] //指定dex文件目录。"classes*.dex"
            //对我们所有的dex文件进行通配，dex如果没有采用分包机制，那就是class.dex。如果采用了就是classes*.dex

            loader = ["com.kevin.tinker.tinker.MyTinkerApplication"]//指定加载patch文件要用到的类。tinker
            // 默认的类不用指定，applicaiton-完成了初始化
        }

        //Tinker可以替换jar、so文件，lib方法块设置so、jar包
        lib {

            pattern = ["lib/*/*.so"] //指定jar包和so存在哪儿。
        }

        //Tinker可以修改资源文件
        res {

            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            //指定Tinker可以修改的资源路径。

            ignoreChange = ["assets/sample_meta.txt"] //指定不受影响的资源路径。即使修改了，Tinker也不做处理。

            largeModSize = 100 //资源修改大小默认值。如果资源修改超过了100k那么Tinker会使用Bsdiff来减少patch的体积。
        }

        //描述本次patch文件的相关信息。不是必须，但是在通常开发中会配置
        packageConfig {

            configField("patchMessage", "fix the 1.0 version's bugs") //用来描述本次修改的版本做了什么

            configField("patchVersion", "1.0")
        }

    }

    //判断是否配置了多渠道。
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")


    /**
     * 备份基准apk和所有的mapping文件到bakPath。
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        //destPath=>bakPath
                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath

                        if (variant.metaClass.hasProperty(variant, 'packageApplicationProvider')) {
                            def packageAndroidArtifact = variant.packageApplicationProvider.get()
                            if (packageAndroidArtifact != null) {
                                try {
                                    from new File(packageAndroidArtifact.outputDirectory.getAsFile().get(), variant.outputs.first().apkData.outputFileName)
                                } catch (Exception e) {
                                    from new File(packageAndroidArtifact.outputDirectory, variant.outputs.first().apkData.outputFileName)
                                }
                            } else {
                                from variant.outputs.first().mainOutputFile.outputFile
                            }
                        } else {
                            from variant.outputs.first().outputFile
                        }

                        //找到apk路径，将文件拷贝到destPath=>bakPath
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        //找到mapping.txt将他拷贝到destPath
                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        //将R.txt拷贝到destPath
                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        from "${buildDir}/intermediates/symbol_list/${variant.dirName}/R.txt"
                        from "${buildDir}/intermediates/runtime_symbol_list/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }

    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}